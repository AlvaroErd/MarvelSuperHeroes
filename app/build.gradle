plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id "dagger.hilt.android.plugin"
}

def apikeyPropertiesFile = rootProject.file("apikey.properties")
def apikeyProperties = new Properties()
apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))

android {

    viewBinding {
        enabled = true
    }

    dataBinding {
        android.buildFeatures.dataBinding = true
    }

    def globalConfiguration = rootProject.extensions.getByName("ext")

    namespace 'com.alerdoci.marvelsuperheroes'
    compileSdk globalConfiguration["androidCompileSdkVersion"]

    defaultConfig {
        applicationId globalConfiguration["androidApplicationId"]
        minSdk globalConfiguration["androidMinSdkVersion"]
        targetSdk globalConfiguration["androidTargetSdkVersion"]
        versionCode globalConfiguration["androidVersionCode"]
        versionName globalConfiguration["androidVersionName"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
//        In order to test this app for the Mango team, you need to create an apikey.properties file and paste this:
//        BASE_URL = "https://gateway.marvel.com/"
//        API_KEY_PUBLIC = "3fd64832e3b735d17d55426fdaa3dd3c"
//        API_KEY_PRIVATE = "08ac92157217a77d37794bc61ff391d6f7349d13"
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", apikeyProperties['BASE_URL']
            buildConfigField "String", "API_KEY_PUBLIC", apikeyProperties['API_KEY_PUBLIC']
            buildConfigField "String", "API_KEY_PRIVATE", apikeyProperties['API_KEY_PRIVATE']
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", apikeyProperties['BASE_URL']
            buildConfigField "String", "API_KEY_PUBLIC", apikeyProperties['API_KEY_PUBLIC']
            buildConfigField "String", "API_KEY_PRIVATE", apikeyProperties['API_KEY_PRIVATE']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    kotlin {
        jvmToolchain(11)
    }
    buildFeatures {
        compose true
    }

    buildFeatures {
        buildConfig = true
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.4.7'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    def appDependencies = rootProject.ext.appDependencies
    def appTestDependencies = rootProject.ext.appTestDependencies

    //App
    implementation appDependencies.kotlin
    implementation appDependencies.coreKtx
    implementation appDependencies.lifecycle
    implementation appDependencies.compose
    implementation appDependencies.composeUi
    implementation appDependencies.composeUiToolingPreview
    implementation appDependencies.gson
    implementation appDependencies.coroutines
    implementation appDependencies.hilt
    implementation appDependencies.hiltCompose
    kapt appDependencies.kapt
    implementation appDependencies.coil
    implementation appDependencies.coilGif
    implementation appDependencies.material3
    implementation appDependencies.materialExtendedIcons
    implementation appDependencies.material3Window
    implementation appDependencies.accompanist
    implementation appDependencies.accompanistPager
    implementation appDependencies.navigationCompose
    implementation appDependencies.navigationRuntime
    implementation appDependencies.fragmentKtx
    implementation appDependencies.lifecycleViewModel
    implementation appDependencies.pagingCompose
    implementation appDependencies.pagingRuntime
    implementation appDependencies.navigationFragmentKtx
    implementation appDependencies.navigationUiKtx
    implementation appDependencies.splashScreen
    implementation appDependencies.constraintLayout
    implementation appDependencies.appcompat
    implementation appDependencies.lottieXML
    implementation appDependencies.lottieCompose
    implementation appDependencies.accompanistPager
    implementation appDependencies.composeFoundations
    implementation appDependencies.composeUiUtils
    implementation appDependencies.lifecyleRuntime
    implementation appDependencies.materialMDC

    testImplementation appTestDependencies.jUnit

    androidTestImplementation appTestDependencies.androidJUnit
    androidTestImplementation appTestDependencies.espresso
    androidTestImplementation appTestDependencies.composeUiTestJUnit

    debugImplementation appTestDependencies.composeUiTooling
    debugImplementation appTestDependencies.composeUiTestManifest

    //data
    implementation dataDependencies.retrofit
    implementation dataDependencies.retrofitConverter
    implementation dataDependencies.okHttp

    testImplementation dataTestDependencies.mockk
}

kapt {
    correctErrorTypes = true
}
